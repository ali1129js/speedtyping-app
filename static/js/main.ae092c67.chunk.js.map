{"version":3,"sources":["Components/Header.js","Components/Score.js","Components/data.js","Components/WordInput.js","Components/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Score","props","id","time","score","data","WordInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","counter","state","setState","message","isPlaying","showWord","randIndex","Math","floor","random","words","length","randWord","handleInput","e","input","target","value","startMatch","setInterval","_this$state","Fragment","type","placeholder","onChange","autoFocus","Components_Score","Component","Instructions","App","Components_Header","Components_WordInput","Components_Instructions","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae092c67.chunk.js","sourcesContent":["/**\n * @Author: Ali\n * @Date:   2019-03-22T10:36:58+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-03-22T10:54:41+01:00\n */\nimport React from \"react\";\n\nconst Header = () => (\n  <header className=\"bg-info text-center p-3 mb-5\">\n    <h1> WordBeater</h1>\n  </header>\n);\nexport default Header;\n","/**\n * @Author: Ali\n * @Date:   2019-03-22T11:05:07+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-03-24T18:59:00+01:00\n */\nimport React from \"react\";\nconst Score = props => (\n  <div className=\"row mt-5\">\n    <div className=\"col-md-6\">\n      <h3>\n        Time Left:\n        <span id=\"time\"> {props.time}</span>\n      </h3>\n    </div>\n    <div className=\"col-md-6\">\n      <h3>\n        Score:\n        <span id=\"score\"> {props.score}</span>\n      </h3>\n    </div>\n  </div>\n);\nexport default Score;\n","/**\n * @Author: Ali\n * @Date:   2019-03-22T12:29:47+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-03-22T12:30:36+01:00\n */\nexport const data = [\n  \"hat\",\n  \"river\",\n  \"lucky\",\n  \"statue\",\n  \"generate\",\n  \"stubborn\",\n  \"cocktail\",\n  \"runaway\",\n  \"joke\",\n  \"developer\",\n  \"establishment\",\n  \"hero\",\n  \"javascript\",\n  \"nutrition\",\n  \"revolver\",\n  \"echo\",\n  \"siblings\",\n  \"investigate\",\n  \"horrendous\",\n  \"symptom\",\n  \"laughter\",\n  \"magic\",\n  \"master\",\n  \"space\",\n  \"definition\"\n];\n","/**\n * @Author: Ali\n * @Date:   2019-03-22T10:38:47+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-03-24T18:58:45+01:00\n */\nimport React, { Component } from \"react\";\nimport Score from \"./Score\";\nimport { data } from \"./data\";\nclass WordInput extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: \"\",\n      message: \"\",\n      isPlaying: false,\n      randWord: \"hello\",\n      time: 5,\n      score: 0,\n      words: data\n    };\n  }\n  componentDidMount() {\n    this.showWord();\n    setInterval(this.counter, 1000);\n  }\n  counter = () => {\n    if (this.state.time > 0) {\n      this.setState({ time: this.state.time - 1 });\n    } else if (this.state.time === 0) {\n      this.setState({\n        message: \"Game Over\",\n        isPlaying: false,\n        score: 0\n      });\n    }\n  };\n  showWord = () => {\n    const randIndex = Math.floor(Math.random() * this.state.words.length);\n    this.setState({\n      randWord: this.state.words[randIndex]\n    });\n  };\n  handleInput = e => {\n    this.setState({\n      input: e.target.value\n    });\n  };\n  startMatch = (input, randWord) => {\n    if (input === randWord) {\n      this.setState({\n        isPlaying: true,\n        time: 6,\n        input: \"\",\n        message: \"Correct!!!!\",\n        score: this.state.score + 1\n      });\n      this.showWord();\n    }\n  };\n  render() {\n    const { input, randWord } = this.state;\n    this.startMatch(input, randWord);\n    return (\n      <>\n        <div className=\"row\">\n          <div className=\"col-md-6 mx-auto\">\n            <p className=\"lead\">\n              Type the given word within\n              <span className=\"text-warning font-weight-bold\" id=\"seconds\">\n                {\" \"}\n                {this.state.time}{\" \"}\n              </span>\n              seconds :\n            </p>\n            <h2 className=\"display-2 mb-5\" id=\"current-word\">\n              {this.state.randWord}\n            </h2>\n            <input\n              type=\"text\"\n              className=\"form-control form-control-lg\"\n              placeholder=\"Start typing...\"\n              id=\"word-input\"\n              onChange={this.handleInput}\n              value={this.state.input}\n              autoFocus\n            />\n            <h4 className=\"mt-3\" id=\"message\">\n              {this.state.message}\n            </h4>\n          </div>\n        </div>\n        <Score score={this.state.score} time={this.state.time} />\n      </>\n    );\n  }\n}\nexport default WordInput;\n","/**\n * @Author: Ali\n * @Date:   2019-03-22T11:01:14+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-03-22T11:04:08+01:00\n */\nimport React from \"react\";\n\nconst Instructions = () => (\n  <div className=\"row mt-5\">\n    <div className=\"col-md-12\">\n      <div className=\"card card-body bg-info text-white\">\n        <h5>Instructions</h5>\n        <p>\n          Type each word in the given amount of seconds to score. To play again,\n          just type the current word. Your score will reset\n        </p>\n      </div>\n    </div>\n  </div>\n);\nexport default Instructions;\n","/**\n * @Author: Ali\n * @Date:   2019-03-22T09:54:56+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-03-24T11:19:33+01:00\n */\nimport React, { Component } from \"react\";\nimport Header from \"./Components/Header\";\nimport WordInput from \"./Components/WordInput\";\nimport Instructions from \"./Components/Instructions\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"bg-dark text-white \">\n        <div className=\"container text-center\">\n          <Header />\n          <WordInput />\n          <Instructions />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * @Author: Ali\n * @Date:   2019-03-22T10:50:58+01:00\n * @Last modified by:   Ali\n * @Last modified time: 2019-03-22T10:50:58+01:00\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}